---
export interface Props {
  numItems: number;  // Number of carousel items
  dotsYOffset: number;  // Offset for the pagination dots (in px or rem)
}

const { numItems, dotsYOffset } = Astro.props;
const uniqueId = Math.random().toString(36).substring(2, 10);  // Generate unique ID for each carousel
---

<section class="carousel" id={`carousel-${uniqueId}`} data-num-items={numItems}>  
  <div class="carousel-inner">
    <div class="carousel-item active" data-index="0">
      <slot name="item-0" />
    </div>
    <div class="carousel-item" data-index="1">
      <slot name="item-1" />
    </div>
    <div class="carousel-item" data-index="2">
      <slot name="item-2" />
    </div>
    <div class="carousel-item" data-index="3">
      <slot name="item-3" />
    </div>
    <div class="carousel-item" data-index="4">
      <slot name="item-4" />
    </div>
    <div class="carousel-item" data-index="5">
      <slot name="item-5" />
    </div>
    <div class="carousel-item" data-index="6">
      <slot name="item-6" />
    </div>
    <div class="carousel-item" data-index="7">
      <slot name="item-7" />
    </div>
    <div class="carousel-item" data-index="8">
      <slot name="item-8" />
    </div>
    <div class="carousel-item" data-index="9">
      <slot name="item-9" />
    </div>
    <div class="carousel-item" data-index="10">
      <slot name="item-10" />
    </div>
    <div class="carousel-item" data-index="11">
      <slot name="item-11" />
    </div>
    <div class="carousel-item" data-index="12">
      <slot name="item-12" />
    </div>
    <div class="carousel-item" data-index="13">
      <slot name="item-13" />
    </div>
    <div class="carousel-item" data-index="14">
      <slot name="item-14" />
    </div>
    <div class="carousel-item" data-index="15">
      <slot name="item-15" />
    </div>
  </div>

  <!-- Pagination Dots -->
  <div class="carousel-dots" style={`bottom: ${dotsYOffset}px;`}>
    {Array.from({ length: numItems }).map((_, index) => (
      <span class={`carousel-dot ${index === 0 ? 'active' : ''}`} data-index={index}></span>
    ))}
  </div>

  <button class="carousel-button prev" aria-label="Previous Slide">
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
      <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 19.5 8.25 12l7.5-7.5" />
    </svg>
  </button>
  <button class="carousel-button next" aria-label="Next Slide">
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
      <path stroke-linecap="round" stroke-linejoin="round" d="m8.25 4.5 7.5 7.5-7.5 7.5" />
    </svg>
  </button>
</section>

<style>
/* Same styles as in your original code */
.carousel {
  position: relative;
  overflow: hidden;
  max-width: 100%;
}

.carousel-inner {
  display: flex;
  transition: transform 0.5s ease-in-out;
}

.carousel-item {
  min-width: 100%;
}

.carousel-button {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  background: #fff;
  cursor: pointer;
  border-radius: 50%;
  width: 2.5rem;
  height: 2.5rem;
  display: flex;
  align-items: center;
  justify-content: center;
  box-shadow: 0 3px 4px 0px rgba(0, 0, 0, 0.7);
}

.carousel-button.prev {
  left: 10px;
}

.carousel-button.next {
  right: 10px;
}

.carousel-dots {
  position: absolute;
  left: 50%;
  transform: translateX(-50%);
  display: flex;
  gap: 5px;
}

.carousel-dot {
  width: 8px;
  height: 8px;
  transform: translateY(-50%);
  background-color: #e0e0e0;
  border-radius: 50%;
  cursor: pointer;
  transition: all 0.3s ease;
  box-shadow: 0 0px 3px 0px rgba(0, 0, 0, 0.7);
}

.carousel-dot.active {
  background-color: #fff;
  width: 10px;
  height: 10px;
}
</style>

<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    const carousels = document.querySelectorAll('[id^="carousel-"]');
  
    carousels.forEach((carousel) => {
      const numItems = parseInt(carousel.dataset.numItems); // Get the numItems from data attribute
      const carouselInner = carousel.querySelector('.carousel-inner');
      const nextButton = carousel.querySelector('.carousel-button.next');
      const prevButton = carousel.querySelector('.carousel-button.prev');
      const dots = carousel.querySelectorAll('.carousel-dot');
  
      let currentIndex = 0;
      const totalItems = numItems;  // Use numItems directly
      console.log(totalItems, numItems);
  
      function updateSlide() {
        const offset = -currentIndex * 100;
        carouselInner.style.transform = `translateX(${offset}%)`;
  
        dots.forEach((dot, index) => {
          dot.classList.toggle('active', index === currentIndex);
        });
      }
  
      nextButton.addEventListener('click', () => {
        currentIndex = (currentIndex + 1) % totalItems;
        updateSlide();
      });
  
      prevButton.addEventListener('click', () => {
        currentIndex = (currentIndex - 1 + totalItems) % totalItems;
        updateSlide();
      });
  
      dots.forEach((dot) => {
        dot.addEventListener('click', () => {
          currentIndex = parseInt(dot.dataset.index);
          updateSlide();
        });
      });
    });
  });
  </script>