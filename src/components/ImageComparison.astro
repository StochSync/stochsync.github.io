---
import { Image } from 'astro:assets';

interface Props {
  image1: any;
  image2: any;
  caption1: string;
  caption2: string;
  height?: string;
  width?: string;
}

const { image1, image2, caption1, caption2, height = 'auto', width = 'auto' } = Astro.props;

// 각 인스턴스에 대한 고유 ID 생성
const uniqueId = Math.floor(Math.random() * 100000);
---

<div class="comparison-container" id={`comparison-${uniqueId}`}>
  <div class="comparison" style={`width: ${width}; height: ${height};`}>
    <!-- 첫 번째 이미지 및 캡션 래퍼 -->
    <!-- <img src={image2} class="image" alt="Image 2" /> -->
    <Image src={image2} alt="Image 2" class="image" />
    <div class="image-caption-wrapper">
      <div class="caption right-caption">{caption2}</div>
    </div>

    <!-- 두 번째 이미지 및 캡션 래퍼 (오버레이) -->
    <div class="image-caption-wrapper overlay-wrapper">
      <!-- <img src={image1} class="image" alt="Image 1" /> -->
      <Image src={image1} alt="Image 1" class="image" />
      <div class="caption left-caption">{caption1}</div>
    </div>

    <!-- 구분선 -->
    <div class="divider"></div>
  </div>
</div>

<script is:inline>
document.addEventListener('DOMContentLoaded', () => {
  const comparisons = document.querySelectorAll('[id^="comparison-"]');

  comparisons.forEach((comparison) => {
    const container = comparison.querySelector(`.comparison`);
    const overlayWrapper = container.querySelector(`.overlay-wrapper`);
    const divider = container.querySelector(`.divider`);

    function updateComparison(event) {
      const rect = container.getBoundingClientRect();
      let x = event.clientX - rect.left;

      // x 값을 컨테이너 범위 내로 제한
      x = Math.max(0, Math.min(x, rect.width));

      const percentage = (x / rect.width) * 100;

      // 오버레이 래퍼의 clip-path 업데이트
      overlayWrapper.style.clipPath = `inset(0px ${rect.width - x}px 0px 0px)`;

      // 구분선 위치 업데이트
      divider.style.left = `${percentage}%`;
    }

    // 초기 상태 설정
    const rect = container.getBoundingClientRect();
    const initialX = rect.width / 2;
    overlayWrapper.style.clipPath = `inset(0px ${rect.width - initialX}px 0px 0px)`;
    divider.style.left = `50%`;

    // 마우스 움직임 이벤트 리스너 추가
    container.addEventListener('mousemove', updateComparison);
  });
});
</script>

<style>
.comparison-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin: 20px 0;
}

.comparison {
  position: relative;
  /*width: 600px; /* 필요에 따라 조정 */
  /*height: 400px; /* 필요에 따라 조정 */
  overflow: hidden;
  cursor: ew-resize;
}

.image-caption-wrapper {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

.image {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.caption {
  position: absolute;
  bottom: 10px;
  padding: 5px 10px;
  font-size: 1.2rem;
  color: white;
  background-color: rgba(0, 0, 0, 0.5);
  border-radius: 5px;
}

.left-caption {
  right: 10px;
}

.right-caption {
  right: 10px;
}

/* 오버레이 래퍼 */
.overlay-wrapper {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  overflow: hidden;
}

/* 구분선 */
.divider {
  position: absolute;
  top: 0;
  bottom: 0;
  left: 50%; /* 초기 위치를 50%로 설정 */
  width: 2px;
  background-color: #ff6347; /* 구분선 색상 */
  pointer-events: none;
}
</style>
